{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nimport useToken from \"./useToken\";\n\nfunction useUser() {\n  _s();\n\n  const [token] = useToken();\n\n  const getPayLodFromToken = token => {\n    console.log(\"the44\", token);\n\n    if (typeof token !== 'string') {\n      console.error(\"Token is not a string:\", token);\n      return null; // or handle the error appropriately\n    }\n\n    const encodedPayload = token.split('.')[1];\n    return JSON.parse(atob(encodedPayload));\n  };\n\n  const [user, setUser] = useState(() => {\n    if (!token) return null;\n    return getPayLodFromToken(token);\n  }); // useEffect(()=>{\n  //     if(!token){\n  //         setUser(null)\n  //     }else{\n  //         setUser(getPayLodFromToken)\n  //     }\n  // },[token])\n  // return user\n}\n\n_s(useUser, \"3Oo0od1mseqMHY1kVrEtLq2XOh8=\", false, function () {\n  return [useToken];\n});\n\nexport default useUser;","map":{"version":3,"sources":["/Users/deepanshu/Desktop/react-auth/front-end/src/auth/useUser.js"],"names":["useEffect","useState","useToken","useUser","token","getPayLodFromToken","console","log","error","encodedPayload","split","JSON","parse","atob","user","setUser"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,SAASC,OAAT,GAAkB;AAAA;;AACd,QAAM,CAACC,KAAD,IAAUF,QAAQ,EAAxB;;AAEA,QAAMG,kBAAkB,GAAGD,KAAK,IAAI;AAChCE,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBH,KAApB;;AACA,QAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC3BE,MAAAA,OAAO,CAACE,KAAR,CAAc,wBAAd,EAAwCJ,KAAxC;AACA,aAAO,IAAP,CAF2B,CAEd;AAChB;;AACD,UAAMK,cAAc,GAAGL,KAAK,CAACM,KAAN,CAAY,GAAZ,EAAiB,CAAjB,CAAvB;AACA,WAAOC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACJ,cAAD,CAAf,CAAP;AACH,GARD;;AAUA,QAAM,CAACK,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,MAAI;AACjC,QAAI,CAACG,KAAL,EAAY,OAAO,IAAP;AACZ,WAAOC,kBAAkB,CAACD,KAAD,CAAzB;AACH,GAH+B,CAAhC,CAbc,CAkBd;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACH;;GA3BQD,O;UACWD,Q;;;AA2BpB,eAAeC,OAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport useToken from \"./useToken\";\n\nfunction useUser(){\n    const [token] = useToken()\n\n    const getPayLodFromToken = token => {\n        console.log(\"the44\",token)\n        if (typeof token !== 'string') {\n            console.error(\"Token is not a string:\", token);\n            return null; // or handle the error appropriately\n        }\n        const encodedPayload = token.split('.')[1];\n        return JSON.parse(atob(encodedPayload))\n    }\n\n    const [user, setUser] = useState(()=>{\n        if (!token) return null;\n        return getPayLodFromToken(token)\n    })\n\n    // useEffect(()=>{\n    //     if(!token){\n    //         setUser(null)\n    //     }else{\n    //         setUser(getPayLodFromToken)\n    //     }\n\n    // },[token])\n    // return user\n}\nexport default useUser"]},"metadata":{},"sourceType":"module"}